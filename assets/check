#!/usr/bin/env bash

set -euo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH

source $(dirname "$0")/common.sh

payload=/tmp/artifactory-resource-request
cat > "$payload" <&0

version_strategy=$(jq -r '.source.version_strategy // "none"' < "$payload")
if [[ $version_strategy == "none" ]]; then
  echo '[]' >&3
  exit 0
fi

base_url=$(require_attr source url)
repository=$(require_attr source repository)
api_key=$(require_attr source api_key)

if [[ $version_strategy == "single-file" ]]; then
  file_path=$(require_attr source path)

  response=$(curl -SsLk \
    --write-out '\n%{http_code}\n' \
    -H "X-JFrog-Art-Api: ${api_key}" \
    "${base_url}/api/storage/${repository}/${file_path}"
  )
  status_code="${response##*$'\n'}"

  if [[ $status_code == 200 ]]; then
    data=$(echo "$response" | head -n-1)
    checksum_sha256=$(echo "$data" | jq -r '.checksums.sha256')
    jq -n "[{
      sha256: \"$checksum_sha256\"
    }]" >&3

  elif [[ $status_code == 404 ]]; then
    echo '[]' >&3

  else
    echo "HTTP API request failed with status code: ${status_code}"
    exit 1
  fi

elif [[ $version_strategy == "multi-file" ]]; then
  version=$(jq -r '.version.number // ""' < "$payload")
  dir_path=$(jq -r '.source.path // ""' < "$payload")
  file_pattern=$(jq -r '.source.file_pattern // ".*"' < "$payload")
  version_pattern=$(require_attr source version_pattern)

  data=$(curl -fSsL \
    -H "X-JFrog-Art-Api: ${api_key}" \
    "${base_url}/api/storage/${repository}/${dir_path}"
  )
  versions=$(echo "$data" | \
    jq -r '.children[] | select(.folder == false) | .uri' | \
    sed -e 's/^\///' | \
    (egrep "$file_pattern" || true) | \
    (egrep -o "$version_pattern" || true) | \
    sort -V
  )
  if [[ -z $versions ]]; then
    echo '[]' >&3
    exit 0
  fi

  latest_version=$(echo "$versions" | tail -1)

  if [[ -z $version ]] || [[ $latest_version == $version ]]; then
    jq -n "[{
      number: \"$latest_version\"
    }]" >&3
  else
    echo "$versions" | jq -R '.' | jq -s 'map({"number": .})' >&3
  fi

else
  echo "unrecognized version strategy: $version_strategy" >&2
  exit 1
fi
