#!/usr/bin/env bash

set -euo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination="$1"

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=/tmp/artifactory-resource-request
cat > "$payload" <&0

base_url=$(require_attr source url)
repository=$(require_attr source repository)
api_key=$(require_attr source api_key)
version_strategy=$(jq -r '.source.version_strategy // "none"' < "$payload")

cd "$destination"

find_file_for_version() {
  local list_data="$1"
  local version="$2"

  local files=$(echo "$list_data" | \
    jq -r '.children[] | select(.folder == false) | .uri' | \
    sed -e 's/^\///' | \
    (egrep "$file_pattern" || true) | \
    sort -V
  )
  IFS=$'\n'
  for f in $files; do
    local v=$(echo "$f" | egrep -o "$version_pattern" || true)
    if [[ $v == $version ]]; then
      echo "$f"
      break
    fi
  done
  unset IFS
}

download_artifact() {
  local file_name="$1"
  local file_url="$2"
  local skip_download=$(jq -r '.params.skip_download // false' < "$payload")
  if [ "$skip_download" = "false" ]; then
    echo "Downloading ${file_url}..."
    curl -fL \
      -H "X-JFrog-Art-Api: ${api_key}" \
      -o "$file_name" \
      "$file_url"
  else
    echo "Skipping download"
  fi
}

if [[ $version_strategy == "none" ]]; then
  # Do nothing
  echo '{"version":{}}' >&3

elif [[ $version_strategy == "single-file" ]]; then
  version=$(require_attr version sha256)
  echo "$version" > version

  file_path=$(require_attr source path)

  data=$(curl -fSsL \
    -H "X-JFrog-Art-Api: ${api_key}" \
    "${base_url}/api/storage/${repository}/${file_path}"
  )

  checksum_sha256=$(echo "$data" | jq -r '.checksums.sha256')
  if [[ $checksum_sha256 != $version ]]; then
    echo "version unavailable: $version" >&2
    exit 1
  fi

  file_url=$(echo "$data" | jq -r '.downloadUri')
  file_name=$(basename $(echo "$data" | jq -r '.path'))
  download_artifact "$file_name" "$file_url"

  jq -n "{
    version: {
      sha256: \"$checksum_sha256\"
    }
  }" >&3

elif [[ $version_strategy == "multi-file" ]]; then
  version=$(require_attr version number)
  echo "$version" > version

  dir_path=$(jq -r '.source.path // ""' < "$payload")
  file_pattern=$(jq -r '.source.file_pattern // ".*"' < "$payload")
  version_pattern=$(require_attr source version_pattern)

  data=$(curl -fSsL \
    -H "X-JFrog-Art-Api: ${api_key}" \
    "${base_url}/api/storage/${repository}/${dir_path}"
  )

  file_name=$(find_file_for_version "$data" "$version")
  if [[ -z $file_name ]]; then
    echo "version unavailable: $version" >&2
    exit 1
  fi

  file_url="${base_url}/${repository}/${dir_path}/${file_name}"
  download_artifact "$file_name" "$file_url"

  jq -n "{
    version: {
      number: \"$version\"
    }
  }" >&3

else
  echo "unrecognized version strategy: $version_strategy" >&2
  exit 1
fi
